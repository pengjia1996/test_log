<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration status="OFF" monitorInterval="30">
    <!--配置文件中变量值,下面会用到-->
    <Properties>
        <!-- 
        	log_file_path 日志保存位置，请根据不同的操作系统进行修改
         -->
        <Property name="log_file_path">D:/YiBuLogs/SchoolUserOnline</Property>
        <!--输出格式布局，每个转换说明符以百分号(%)开头，'%'后面的转换字符有如下:-->
        <!--
            p (level) 日志级别
            c（logger） Logger的Name
            C (class) Logger调用者的全限定类名 ***
            d (date) 日期
            highlight 高亮颜色
            l (location) 调用位置 ***
            L (line) 行号
            m (msg/message) 输出的内容
            M (methode) 调用方法 ***
            maker marker的全限定名
            n 输出平台相关的换行符,如'\n' '\r\n'
            pid (processId) 进程ID
            level （p）日志级别
            r JVM启动后经过的微秒
            t (tn/thread/threadName) 线程名称
            T (tid/threadId) 线程ID
            tp (threadPriority) 线程优先级
            x (NDC) 线程Context堆栈
            -->
        <!-- 默认打印日志的格式(主要用于文件输出) -->
        <property name="log_pattern" value="%date{HH:mm:ss.SSS} [%t] %-5level %logger  %n %msg %n %n"/>
        <!--<property name="log_pattern" value="%date{HH:mm:ss.SSS} [%t] %-5level %l %n 【%msg】%n %n"/>-->
        <!-- 文件名称前缀（一般为项目名称） -->
        <property name="log_file_name_prefix" value="SchoolUserOnline"/>
    </Properties>
    <!--Appenders 输出源,可以简单理解为配置要写到哪里怎么写-->
    <!--Loggers 日志分根器,可以简单理解为配置哪些信息写到哪些append里-->
    <Appenders>
        <!--target="SYSTEM_OUT" 表示输出到终端-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--筛选过滤,要打印到当前appender的日志信息 如果满足level的接收，不满足的拒绝-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
        </Console>
        <!--滚动文件-->
        <!--filePattern 指定当发生Rolling时，文件的转移和重命名规则-->
        <RollingFile name="info_RollingFile" fileName="${log_file_path}/${log_file_name_prefix}.log"
                     filePattern="${log_file_path}/$${date:yyyy-MM}/${log_file_name_prefix}-main-%d{yyyy-MM-dd}-%i.log">
            <!-- 只接受level为INFO以上的日志 -->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--日志信息输出格式-->
            <!--注意：%M %L 所在的appender如果是AsyncLogger异步Logger的输出源的话,
            只有当AsyncLogger设置了includeLocation="true"才会显示
            但是，这样会降低日志输出的性能(it can make logging 5 - 20 times slower),
            所以,如果注重性能这里就不要打印日志的行数和所在方法
            -->
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <!--
                这个配置需要和filePattern结合使用，
                注意filePattern中配置的文件重命名规则是${log_file_path}/$${date:yyyy-MM}/%d{yyyy-MM-dd}-%i.log，
                最小的时间粒度是dd，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每一天生成一个新文件。
                如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件
                -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--指定当文件体积大于size指定的值时，触发Rolling-->
                <SizeBasedTriggeringPolicy size="200MB"/> <!-- size="250 MB" -->
            </Policies>
            <!-- 最大保留10个文件 -->
            <DefaultRolloverStrategy max="20"/>
            <!--
             当触发rollover时，删除baseDir文件夹或其子文件下面的文件名符合app-*.log.gz且距离最后的修改日期超过60天的文件。
             其中，basePath指定了扫描开始路径，为baseDir文件夹。maxDepth指定了目录扫描深度，为2表示扫描baseDir文件夹及其子文件夹。
             IfFileName指定了文件名需满足的条件，IfLastModified指定了文件修改时间需要满足的条件。
             -->
            <!--<DefaultRolloverStrategy>
                <Delete basePath="${baseDir}" maxDepth="2">
                    <IfFileName glob="*/app-*.log.gz" />
                    <IfLastModified age="60d" />
                </Delete>
            </DefaultRolloverStrategy>-->
        </RollingFile>
        <!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，
        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="error_RollingFile" fileName="${log_file_path}/error.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-error-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="test_RollingFile" fileName="${log_file_path}/test.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-test-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <!-- goWeb 日志-->
        <RollingFile name="goWeb_RollingFile" fileName="${log_file_path}/goWeb.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-goWeb-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <!-- Xuanke日志-->
        <RollingFile name="Xuanke_RollingFile" fileName="${log_file_path}/Xuanke.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-Xuanke-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <!-- applybd日志输出-->
        <RollingFile name="applybd_RollingFile" fileName="${log_file_path}/applybd.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-applybd-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="timeAround_RollingFile" fileName="${log_file_path}/timeAround.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-timeAround-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="repeatInterceptor_RollingFile" fileName="${log_file_path}/repeatInterceptor.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-repeatInterceptor-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="count_RollingFile" fileName="${log_file_path}/count.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-count-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="Cookie_RollingFile" fileName="${log_file_path}/Cookie.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-Cookie-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="weixinBind_RollingFile" fileName="${log_file_path}/weixinBind.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-weixinBind-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="synweixinbind_RollingFile" fileName="${log_file_path}/synweixinbind.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-synweixinbind-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="util_RollingFile" fileName="${log_file_path}/util.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-util-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
        <RollingFile name="ssh_db_operate_util_RollingFile" fileName="${log_file_path}/ssh_db_operate_util.log"
                     filePattern="${FILE_PATH}/${FILE_NAME}-ssh_db_operate_util-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="200MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
    </Appenders>
    <Loggers>
        <!--日志级别level以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
        <!--日志信息 优先让 子类Logger匹配 -->
        <!--Logger 父子Logger区分，举个粟子  name为"a"的Logger 是 name为"a.b"的父Logger,
         而Root的name是"" 所以Root是所有Logger的父Logger(LogManager.ROOT_LOGGER_NAME="")-->
        <!--Logger name="serverlogger"表示捕获日志信息name为serverlogger或serverlogger.xxx的信息，
        子类Logger捕获了日志信息不会再被父Logger捕获,即使子类捕获日志信息由于level不满足不会去打印这条日志信息。-->
        <!--注意 Logger 的 additivity 传递性,默认true
        当additivity="true"时,表示当Logger捕获到日志信息并且日志信息的level大于等于当前Logger的属性level,
        日志信息会打印到该Logger所有的appender中包括它的所有父logger的appender(不会管父logger的级别如何）,
        所以呢,如果Logger的additivity不设置"false"的话，很有可能会出现重复打印的哦-->
        <!--AsyncLogger 异步记录日志,Log4j2中的AsyncLogger的内部使用了Disruptor框架,所以需要添加依赖disruptor-3.3.4-->
        <!--注意：includeLocation="true" 可以解决 AsyncLogger异步Logger输出appender中的日志 类方法和行数信息显示不出来问题，
        但是会降低性能(it can make logging 5 - 20 times slower)，
        所以呢 注重性能这里就不显示打印日志的行数和所在方法,把这里的includeLocation="true 去掉。
        AsyncLogger 的additivity属性需要设置为false，这个异步需要依赖disruptor3.4，
        如果没有disruptor3.4依赖包,AsyncLogger日志会打印不出来
        -->
        <!--        <AsyncLogger name="serverlogger" level="debug" additivity="false" includeLocation="true">-->
        <!--            &lt;!&ndash;被当前Logger捕获到的日志信息level大于等于当前Logger的level属性时写入到 RollingFileInfo 里&ndash;&gt;-->
        <!--            &lt;!&ndash;每个Logger 可以设置多个appender ,如果有多个appender 会写入每个appender里&ndash;&gt;-->
        <!--            <appender-ref ref="RollingFileInfo"/>-->
        <!--        </AsyncLogger> -->
        <!--这是 同步记录日志写法-->
        <!--        <Logger name="org.apache.ibatis" level="DEBUG" additivity="false">-->
        <!--            <AppenderRef ref="Console"/>-->
        <!--        </Logger>-->
        <!--Root 的name="" , 是所有其他配置的Logger的父Logger-->
        <!--如果 Root的level="DEBUG",而且没有设置子类捕获过滤如"org"之类的日志信息的话，会发现控制台会打印非常多的调试信息-->
        <!--解决办法提高Root的level级别，或者设置子类Logger去捕获过滤相关不想要打印的日志信息,
        注意level级别给低点,并且设置additivity="false"，如上面的Logger org.apache.ibatis-->
        <!--  start 日志屏蔽到无用的 debug,info 信息 -->
        <Logger name="org.springframework" level="warn">
            <AppenderRef ref="Console"/>
        </Logger>
        <Logger name="org.hibernate" level="warn">
            <AppenderRef ref="Console"/>
        </Logger>
        <!-- end  日志屏蔽 -->
        <!-- 测试日志 -->
        <Logger name="test" level="info" additivity="true">
            <AppenderRef ref="test_RollingFile"/>
        </Logger>
        <!--  goWeb 日志-->
        <Logger name="goWeb" level="info" additivity="false">
            <AppenderRef ref="goWeb_RollingFile"/>
        </Logger>
        <Logger name="Xuanke" level="debug" additivity="false">
            <AppenderRef ref="Xuanke_RollingFile"/>
        </Logger>
        <Logger name="applybd" level="info" additivity="false">
            <AppenderRef ref="applybd_RollingFile"/>
        </Logger>
        <Logger name="timeAround" level="info" additivity="false">
            <AppenderRef ref="timeAround_RollingFile"/>
        </Logger>
        <Logger name="repeatInterceptor" level="info" additivity="false">
            <AppenderRef ref="repeatInterceptor_RollingFile"/>
        </Logger>
        <Logger name="test" level="info" additivity="false">
            <AppenderRef ref="test_RollingFile"/>
            <AppenderRef ref="Console"/>
        </Logger>
        <Logger name="count" level="info" additivity="false">
            <AppenderRef ref="count_RollingFile"/>
        </Logger>
        <Logger name="Cookie" level="info" additivity="false">
            <AppenderRef ref="Cookie_RollingFile"/>
        </Logger>
        <Logger name="weixinBind" level="info" additivity="false">
            <AppenderRef ref="weixinBind_RollingFile"/>
        </Logger>
        <Logger name="synweixinbind" level="info" additivity="false">
            <AppenderRef ref="synweixinbind_RollingFile"/>
        </Logger>
        <Logger name="util" level="debug" additivity="false">
            <AppenderRef ref="util_RollingFile"/>
        </Logger>
        <Logger name="ssh_db_operate_util" level="debug" additivity="false">
            <AppenderRef ref="ssh_db_operate_util_RollingFile"/>
        </Logger>
        <Root level="info">

            <appender-ref ref="Console"/>
            <appender-ref ref="info_RollingFile"/>
<!--            <appender-ref ref="error_RollingFile"/>-->
<!--            <appender-ref ref="goWeb_RollingFile"/>-->
<!--            &lt;!&ndash;<appender-ref ref="goCsRollingFile"/>&ndash;&gt;-->
<!--            &lt;!&ndash;<appender-ref ref="WeixinPayRollingFile"/>&ndash;&gt;-->
<!--            &lt;!&ndash;选课日志&ndash;&gt;-->
<!--            <appender-ref ref="Xuanke_RollingFile"/>-->
<!--            &lt;!&ndash; #新生报到日志&ndash;&gt;-->
<!--            <appender-ref ref="applybd_RollingFile"/>-->
<!--            &lt;!&ndash; #切面日志&ndash;&gt;-->
<!--            <appender-ref ref="timeAround_RollingFile"/>-->
<!--            &lt;!&ndash; #避免表单重复提交日志&ndash;&gt;-->
<!--            <appender-ref ref="repeatInterceptor_RollingFile"/>-->
<!--            &lt;!&ndash; #筛选德育分值错误数据的日志&ndash;&gt;-->
<!--            <appender-ref ref="test_RollingFile"/>-->
<!--            &lt;!&ndash; #筛选德育分值错误数据的日志&ndash;&gt;-->
<!--            <appender-ref ref="count_RollingFile"/>-->
<!--            &lt;!&ndash; #Cookie日志&ndash;&gt;-->
<!--            <appender-ref ref="Cookie_RollingFile"/>-->
<!--            &lt;!&ndash;#微信绑定日志&ndash;&gt;-->
<!--            <appender-ref ref="weixinBind_RollingFile"/>-->
<!--            &lt;!&ndash; #同步微信绑定记录日志&ndash;&gt;-->
<!--            <appender-ref ref="synweixinbind_RollingFile"/>-->
<!--            &lt;!&ndash; #公共类的日志输出&ndash;&gt;-->
<!--            <appender-ref ref="util_RollingFile"/>-->
<!--            &lt;!&ndash;#ssh框架数据库操作公共类日志&ndash;&gt;-->
<!--            <appender-ref ref="ssh_db_operate_util_RollingFile"/>-->
        </Root>
        <!--注: 防止 Log4j2 退出时报OOME
        1 混合异步和同步Logger；root logger 为同步，其它为异步(如果additivity为false同步也行)
        2 AsyncLogger 的additivity属性设置为false
        -->
    </Loggers>
</Configuration>
